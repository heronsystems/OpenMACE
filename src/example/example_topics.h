#ifndef EXAMPLE_TOPICS_H
#define EXAMPLE_TOPICS_H

#include "data/i_topic_component_data_object.h"
#include "data/topic_data_object_collection.h"


//////////////////////////////////////////////////////////////////////////////////////////////
/// Example definitions of topic components, which can be used in topics.
///
/// Components are the sets of data that is generated by a single sensor/process.
/// These components should be seperated into a set of primitive data types, which could then be transmitted over some network.
/// The goal here is that the resulting TopicDatagram can be transmitted without knowing anything about the contents/structure of the data
/// i.e. "attitude" is mapped to three doubles (roll, pitch, yaw).
///
/// A "topic component" should be unaware of what topic it is going to be used in, and may be used in multiple.
/// Example: a "Telemetry" and "Photo" topic may both contain "Global Position" component (among other things).
///
/// Multiple components can be attributed to a single topic.
/// Eample: "Telemetry" topics may contain Attitude, Global Position, Altitude, Local Position, velocities, etc
///
//////////////////////////////////////////////////////////////////////////////////////////////


static constexpr char AttitudeComponent_name[] = "attitude";
extern const MaceCore::TopicComponentStructure AttitudeComponent_structure = []{
    MaceCore::TopicComponentStructure structure;
    structure.AddTerminal<double>("roll");
    structure.AddTerminal<double>("pitch");
    structure.AddTerminal<double>("yaw");
    return structure;
}();

class TopicComponent_Attitude :public Data::NamedTopicComponentDataObject<AttitudeComponent_name, &AttitudeComponent_structure>
{
public:
    MaceCore::TopicDatagram GenerateDatagram() const
    {
        MaceCore::TopicDatagram datagram;
        datagram.AddTerminal<double>("roll", m_r);
        datagram.AddTerminal<double>("pitch", m_p);
        datagram.AddTerminal<double>("yaw", m_y);
        return datagram;
    }

    void CreateFromDatagram(const MaceCore::TopicDatagram &datagram)
    {
        m_r = datagram.GetTerminal<double>("roll");
        m_p = datagram.GetTerminal<double>("pitch");
        m_y = datagram.GetTerminal<double>("yaw");
    }

public:
    TopicComponent_Attitude()
    {

    }

    TopicComponent_Attitude(double roll, double pitch, double yaw) :
        m_r(roll), m_p(pitch), m_y(yaw)
    {

    }

    double Roll() const { return m_r; }
    double Pitch() const { return m_p; }
    double Yaw() const { return m_y; }


private:

    double m_r;
    double m_p;
    double m_y;
};



static constexpr  char ComponentGlobalPosition_name[] = "global_position";
extern const MaceCore::TopicComponentStructure ComponentGlobalPosition_structure;

class TopicComponent_GlobalPosition :public Data::NamedTopicComponentDataObject<ComponentGlobalPosition_name, &ComponentGlobalPosition_structure>
{
public:
    virtual MaceCore::TopicDatagram GenerateDatagram() const;
    virtual void CreateFromDatagram(const MaceCore::TopicDatagram &datagram);

public:
    TopicComponent_GlobalPosition()
    {

    }


private:

    double m_lat;
    double m_long;
};



//////////////////////////////////////////////////////////////////////////////////////////////
///
//////////////////////////////////////////////////////////////////////////////////////////////

typedef Data::TopicDataObjectCollection<TopicComponent_Attitude, TopicComponent_GlobalPosition> TopicType_Telemetry;

#endif // EXAMPLE_TOPICS_H
